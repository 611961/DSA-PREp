#include <iostream>
#include <vector>
using namespace std;

void deleteRoot(vector<int>& heap, int n){
    if (n == 0) {
        cout << "Heap is empty. Nothing to delete." << endl;
        return;
    }
    
    heap[0] = heap[n-1];  //Replace the root with the last element
    n = n - 1;  // Decrease the size of the heap
    
    int i = 0;
    while (i < n) {
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        int largest = i;

        if (left < n && heap[left] > heap[i]) {
            largest = left;
        }
        if (right < n && heap[right] > heap[largest]) {
            largest = right;
        }

        if (largest != i) {
            swap(heap[i], heap[largest]);
            i = largest;
        } else {
            return;  // Heap property is satisfied
        }
    }
}

int main(){
  vector<int> heap = {34, 30, 10, 20, 15};
  
  deleteRoot(heap, heap.size());
  
  cout << "Heap elements after deleting the root: ";
  for (int i = 0; i < heap.size() - 1; i++) {
      cout << heap[i] << " ";
  }

  return 0;
}
