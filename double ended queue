#include<iostream>
#include<queue>
using namespace std;

const int n = 5;
int arr[n];
int siz = n;
int front = -1;
int rear = -1;

void pushfront(int x) {
    if ((front == 0 && rear == siz - 1) || (rear == (front - 1) % (siz - 1))) {
        cout << "overflow\n";
    }
    else if (front == -1) {
        front = rear = 0;
    }
    else if (front == 0 && rear == siz - 1) {
        front = siz - 1;
    }
    else {
        front--;
    }
    arr[front] = x;
}

void pushrear(int x) {
    if ((front == 0 && rear == siz - 1) || (rear == (front - 1) % (siz - 1))) {
    	//2nd vali cndtn tb k liye h jb rear front k ek peeche ho
    	
        cout << "overflow\n";
    }
    else if (front == -1) {
        front = rear = 0;
    }
    else if (rear == siz - 1 && front != 0) {
        rear = 0;
    }
    else {
        rear++;
    }
    arr[rear] = x;
}

int popfront() {
    if (front == -1) {
        cout << "under flow\n";
    }
    int ans = arr[front];
    arr[front] = -1;
    if (front == rear) {
        front = rear = -1;
    }
    else if (front == siz - 1) { // for cyclic nature
        front = 0;
    }
    else {
        front++;
    }
    return ans;
}

int poprear() {
    if (front == -1) {
        cout << "underflow\n";
    }
    int ans = arr[rear];
    arr[rear] = -1;
    if (front == rear) {
        front = rear = -1;
    }
    else if (rear == 0) {
        rear = siz - 1; // for cyclic nature
    }
    else {
        rear--;
    }
    return ans;
}

int main() {
    // Example usage of the double-ended queue functions
    pushfront(1);
    pushrear(2);
    pushfront(3);
    pushrear(4);
    cout << popfront() << endl; // Output: 3
    cout << poprear() << endl; // Output: 4
    return 0;
}
